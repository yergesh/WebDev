2667. Create Hello World Function

var createHelloWorld = function() {
    return function(...args) {
    return "Hello World";
    }
};

2620. Counter

var createCounter = function(n) {
    return function() {
        return n++;
    };
};

2704. To Be Or Not To Be

var expect = function(val) {
    return {
        toBe: (val2) => {
            if(val !== val2) throw new Error("Not Equal");
            else return true;
        },
        notToBe: (val2) => {
            if(val === val2) throw new Error("Equal");
            else return true;
        }
    }
};

2665. Counter II

var createCounter = function(init) {
    current = init;
    return {
        increment: () => {return ++init;},
        reset: () => {init = current; return current;},
        decrement: () => {return --init;}
    }
};

2635. Apply Transform Over Each Element in Array

var map = function(arr, fn) {
    return arr.map(fn);
};

2634. Filter Elements from Array

var filter = function(arr, fn) {
    var ans=[];
    for(var i = 0; i < arr.length; i++){
        fn(arr[i],i)?ans.push(arr[i]) :{} ;
    }
    return ans;
};

2626. Array Reduce Transformation

var reduce = function(nums, fn, init) {
    let val = init 
    for( let i = 0 ; i < nums.length ; i++ ){
        val =fn(val,nums[i])
    }
    return val
};

2629. Function Composition

var compose = function(functions) {
	return function(x) {
        if (functions.length === 0) {
            return x;
        }
        let result = x;
        for (let i = functions.length - 1; i >= 0; i--) {
            result = functions[i](result);
        }
        return result
    }
};

2703. Return Length of Arguments Passed

var argumentsLength = function(...args) {
    return args.length;
};

2666. Allow One Function Call

var once = function(fn) {
    let called = false;
    return function(...args){
        if (!called) {
            called = true;
            return fn(...args);
        }
    }
};

2723. Add Two Promises

var addTwoPromises = async function(promise1, promise2) {
    return await promise1 + await promise2
};

2621. Sleep

async function sleep(millis) {
    await new Promise(res => setTimeout(res, millis));
}

2715. Timeout Cancellation

var cancellable = function(fn, args, t) {
    const timeoutHandle = setTimeout(() => fn(...args), t)    
    return () => clearTimeout(timeoutHandle)
};

2725. Interval Cancellation

var cancellable = function(fn, args, t) {
    fn(...args);
    const interval = setInterval(()=>{
        fn(...args);
    }, t);
    return () => {
        clearInterval(interval);
    };
};

2727. Is Object Empty

var isEmpty = function(obj) {
    return JSON.stringify(obj).length === 2;  
};

2677. Chunk Array

var chunk = function(arr, size) {
    const result = []
    for(i = 0;i<arr.length;i+=size){
        result.push(arr.slice(i, Math.min(arr.length, i+size)))
    }
    return result
};

2619. Array Prototype Last

Array.prototype.last = function() {
    return this.length ? this[this.length-1] : -1;
};

2724. Sort By

var sortBy = function(arr, fn) {
    return arr.sort((a, b) => fn(a) - fn(b));
};

2695. Array Wrapper

var ArrayWrapper = function(nums) {
    this.arr = nums
};

ArrayWrapper.prototype.valueOf = function() {
    return this.arr.reduce((sum, item) => sum + item, 0)
}

ArrayWrapper.prototype.toString = function() {
    return JSON.stringify(this.arr)
}

2726. Calculator with Method Chaining

class Calculator {
  
  /** 
   * @param {number} value
   */
  constructor(value) {
    this.value = value;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  add(value){
    this.value += value;
    return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  subtract(value){
    this.value -= value;
    return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */  
  multiply(value) {
    this.value *= value;
    return this;
  }

  /** 
   * @param {number} value
   * @return {Calculator}
   */
  divide(value) {
    if (value === 0) {
      throw new Error('Division by zero is not allowed');
    }
    this.value /= value;
    return this;
  }
  
  /** 
   * @param {number} value
   * @return {Calculator}
   */
  power(value) {
    this.value = Math.pow(this.value, value);
    return this;
  }
    
  /** 
   * @return {number}
   */
  getResult() {
   return this.value;
  }
}